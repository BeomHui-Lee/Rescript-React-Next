// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";

function $$default(param) {
  var match = React.useState(function () {
        return "";
      });
  var setQuestion = match[1];
  var question = match[0];
  var match$1 = React.useState(function () {
        return [];
      });
  var setQArray = match$1[1];
  var qArray = match$1[0];
  var match$2 = React.useState(function () {
        return {
                x: 3,
                y: 1
              };
      });
  var move = match$2[0];
  var match$3 = React.useState(function () {
        return 31;
      });
  var changeNum = match$3[1];
  var num = match$3[0];
  var match$4 = React.useState(function () {
        return 0;
      });
  var setAnswer = match$4[1];
  var questionChange = function (e) {
    return Curry._1(setQuestion, e.currentTarget.value);
  };
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex"
                }, React.createElement("div", {
                      className: "flex w-1/2"
                    }, React.createElement("textarea", {
                          style: {
                            border: "1px solid #333",
                            height: "700px",
                            width: "260px"
                          },
                          value: question,
                          onChange: questionChange
                        })), React.createElement("div", {
                      className: "w-1/2"
                    }, React.createElement("div", {
                          style: {
                            display: "block"
                          }
                        }, React.createElement("input", {
                              style: {
                                display: "inline-block",
                                margin: "10px"
                              },
                              type: "button",
                              value: "Day3 문제읽기",
                              onClick: (function (param) {
                                  Curry._1(changeNum, (function (param) {
                                          return question.indexOf("\n");
                                        }));
                                  return Curry._1(setQArray, (function (param) {
                                                return question.split("\n");
                                              }));
                                })
                            }), React.createElement("input", {
                              style: {
                                display: "inline-block",
                                margin: "10px"
                              },
                              disabled: question === "" && qArray === [],
                              type: "button",
                              value: "Day3 문제풀기",
                              onClick: (function (param) {
                                  var tempX = 0;
                                  var totalString = {
                                    contents: Caml_array.get(qArray, 0) + "\n"
                                  };
                                  var count = {
                                    contents: 0
                                  };
                                  for(var i = 1 ,i_finish = qArray.length; i < i_finish; ++i){
                                    if (Caml_int32.mod_(i, move.y) === 0) {
                                      tempX = tempX + move.x | 0;
                                      tempX = tempX > (num - 1 | 0) ? tempX - num | 0 : tempX;
                                      var s = {
                                        contents: Caml_array.get(qArray, i)
                                      };
                                      var match = s.contents.substr(tempX, 1);
                                      switch (match) {
                                        case "#" :
                                            s.contents = s.contents.substr(0, tempX) + "X" + s.contents.substr(tempX + 1 | 0, num);
                                            count.contents = count.contents + 1 | 0;
                                            break;
                                        case "." :
                                            s.contents = s.contents.substr(0, tempX) + "O" + s.contents.substr(tempX + 1 | 0, num);
                                            break;
                                        default:
                                          console.log(s);
                                      }
                                      Caml_array.set(qArray, i, s.contents);
                                    }
                                    totalString.contents = totalString.contents + Caml_array.get(qArray, i) + "\n";
                                  }
                                  Curry._1(setQuestion, (function (param) {
                                          return totalString.contents;
                                        }));
                                  return Curry._1(setAnswer, (function (param) {
                                                return count.contents;
                                              }));
                                })
                            })), React.createElement("div", undefined, "답은", React.createElement("input", {
                              style: {
                                display: "inline-block",
                                margin: "10px",
                                textAlign: "center",
                                width: "40px"
                              },
                              readOnly: true,
                              value: match$4[0].toString()
                            }), "개 입니다."))));
}

export {
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
